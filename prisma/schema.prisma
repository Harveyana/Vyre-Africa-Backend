// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  PENDING
  ACTIVE
  NOT_ACTIVE
}

enum Portfolio {
  FOUNDER
  SHAREHOLDER
  DIRECTOR
}

enum ProductStatus {
  PUBLISHED
  DRAFTED
}

enum AccountType {
  BUSINESS
  INDIVIDUAL
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  PENDING
  DISMISSED
}

enum OrderType {
  BUY
  SELL
}

enum OrderStatus {
  OPEN
  CLOSED
  CANCELED
}

enum CampaignType {
  EMAIL
  PUSH
  SMS
}

enum NotificationType {
  ORDER
  GENERAL
  PRODUCT
  STORE
  TOPUP
}

enum BroadcastMode {
  PUSH
  EMAIL
  SMS
}

enum BroadcastRecipient {
  ALL
  SHOPPERS
  MALLS
}

enum BroadcastStatus {
  PUBLISHED
  DRAFTED
}

enum walletType {
  CRYPTO
  FIAT
}

enum TransactionStatus {
  SUCCESSFUL
  PENDING
  FAILED
}

enum Currency {
  NGN
  USD
  ETH
  BTC
  LTC
  TRON
  BNB
  XRP
  USDT_ETH
  USDT_TRON
  USDC
}

enum TransactionPaymentMethod {
  WALLET
  TRANSFER
}

enum TransactionType {
  FAILED
  CREDIT_PAYMENT
  DEBIT_PAYMENT
  FIAT_DEPOSIT
  FIAT_WITHDRAWAL
  EXCHANGE_BUY
  EXCHANGE_SELL
}

enum TwoFactorAuthenticationMethod {
  EMAIL_OTP
  SMS_OTP
  THIRD_PARTY_AUTHENTICATOR
}

enum AdvertStatus {
  PUBLISHED
  DRAFTED
}

model Rating {
  id        Int      @id @default(autoincrement())
  stars     Int
  comment   String?
  createdAt DateTime @default(now())
  productId String
  userId    String
}

model kyc {
  id      String  @id @default(cuid())
  idType  String
  idFront String?
  idBack  String?
  regNo   String? @unique @db.VarChar(100)
  file    String? @db.VarChar(600)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  idNumber  String?
  createdAt DateTime @default(now())
}

model User {
  id                String      @id @default(cuid())
  firstName         String      @db.VarChar(255)
  lastName          String      @db.VarChar(255)
  BusinessName      String?
  referralId        String?
  referreeId        String?
  email             String      @unique @db.VarChar(255)
  userStatus        UserStatus  @default(ACTIVE)
  type              AccountType @default(INDIVIDUAL)
  photoUrl          String?     @db.VarChar(500)
  phoneNumber       String?
  password          String?     @db.VarChar(500)
  emailVerified     Boolean?    @default(false)
  accountVerified   Boolean?    @default(false)
  otpCode           String?
  otpCodeUsed       Boolean     @default(false)
  otpCodeExpiryTime String?

  pushToken                     String?
  userBanks                     UserBank[]
  notifications                 Notification[]
  transactions                  Transaction[]
  wallet                        Wallet[]
  notificationSetting           NotificationSetting?
  twoFactorEnabled              Boolean                       @default(false)
  twoFactorAuthenticationMethod TwoFactorAuthenticationMethod @default(EMAIL_OTP)
  twoFactorAuthenticationSecret String?
  isDeactivated                 Boolean                       @default(false)
  deactivationReason            String?
  createdAt                     DateTime                      @default(now())
  Card                          Card?
  kyc                           kyc[]
  Order                         Order[]
}

model Bank {
  id        String     @id @default(cuid())
  name      String
  slug      String
  code      String
  country   String
  userBanks UserBank[]
  createdAt DateTime   @default(now())
}

model UserBank {
  id            String   @id @default(cuid())
  accountNumber String
  accountName   String
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  bankId        String
  bank          Bank     @relation(fields: [bankId], references: [id])
  createdAt     DateTime @default(now())
}

model NotificationSetting {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  emailNotification Boolean
  pushNotification  Boolean
  smsNotification   Boolean
  createdAt         DateTime @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  userId    String?
  user      User?            @relation(fields: [userId], references: [id])
  type      NotificationType @default(GENERAL)
  title     String?
  content   String
  createdAt DateTime         @default(now())
}

model Transaction {
  id          String            @id @default(cuid())
  walletId    String?
  userId      String?
  orderId     String?
  currency    Currency
  user        User?             @relation(fields: [userId], references: [id])
  wallet      Wallet?           @relation(fields: [walletId], references: [id])
  reference   String?
  amount      Decimal
  status      TransactionStatus
  type        TransactionType
  description String
  createdAt   DateTime          @default(now())
}

model Wallet {
  id     String     @id @default(cuid())
  userId String?
  user   User?      @relation(fields: [userId], references: [id])
  type   walletType @default(CRYPTO)
  imgurl String

  currency           Currency
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  Tatum_customerId   String
  accountingCurrency String
  depositAddress     String?
  destinationTag     String?
  derivationKey      Int?
  frozen             Boolean

  accountBalance   Decimal       @default(0.00)
  availableBalance Decimal       @default(0.00)
  Transaction      Transaction[]
  Block            Block[]
  basePairs        Pair[]   @relation("BaseWallet")  // Reverse relation for `baseWallet`
  quotePairs       Pair[]   @relation("QuoteWallet") // Reverse relation for `quoteWallet`
}

model Order {
  id                  String      @id @default(cuid())
  type                OrderType   @default(BUY)
  blockId             String?
  userId              String?
  pairId              String
  user                User?       @relation(fields: [userId], references: [id])
  pair                Pair        @relation(fields: [pairId], references: [id])
  block               Block?      @relation(fields: [blockId], references: [id])
  amount              Float
  amountProcessed     Float       @default(0.0) // Amount of the order that has been filled
  percentageProcessed Float       @default(0.0) // Percentage of the order that has been filled
  price               Float
  status              OrderStatus @default(OPEN)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Pair {
  id                  String      @id @default(cuid())
  name                String
  base                String
  quote               String
  baseMinimum         Float    // minimum amount required for to place a sell order
  quoteMinimum        Float    // minimum amount required for to place a buy order

  baseWalletId        String?
  baseWallet          Wallet?       @relation("BaseWallet", fields: [baseWalletId], references: [id])

  quoteWalletId       String?
  quoteWallet         Wallet?       @relation("QuoteWallet", fields: [quoteWalletId], references: [id])
  createdAt           DateTime      @default(now())
  Order               Order[]
}

model Block {
  id          String   @id @default(cuid())
  active      Boolean  @default(true)
  walletId    String?
  wallet      Wallet?  @relation(fields: [walletId], references: [id])
  amount      Float
  description String
  createdAt   DateTime @default(now())
  Order       Order[]
}

model Card {
  id                String   @id @default(cuid())
  userId            String   @unique
  cardHolderName    String
  cardNumber        String
  expiryDate        String
  cvv               Int
  brand             String
  cardType          String
  authorizationCode String
  isPreferred       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

model Advert {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  imgUrl    String
  title     String
  status    Status   @default(ACTIVE)
}

model AdvertDraft {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  imgUrl    String?
  title     String?
  status    Status?  @default(ACTIVE)
}

model Broadcast {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  title       String
  body        String
  mode        BroadcastMode
  recipient   BroadcastRecipient
  status      BroadcastStatus
  type        String
  scheduledAt DateTime?
  isSent      Boolean            @default(false)
}

model AdminRevenue {
  id             String   @id @default(cuid())
  organisationId String
  amount         Decimal  @default(0.00)
  currency       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}
