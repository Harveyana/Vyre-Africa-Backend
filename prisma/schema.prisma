// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  PENDING
  ACTIVE
  NOT_ACTIVE
}

enum Portfolio {
  FOUNDER
  SHAREHOLDER
  DIRECTOR
}

enum ProductStatus {
  PUBLISHED
  DRAFTED
}

enum TripStatus {
  PENDING
  ONGOING
  COMPLETED
}

enum TripType {
  HAULAGE
  DISPATCH
  RIDE
}

enum TripTimeLine {
  ORDER_RECEIVED
  ORDER_ACCEPTED
  PICKUP_STARTED
  ARRIVED_AT_PICKUP
  PICKED_UP
  DROP_OFF_STARTED
  DELIVERED
}

enum ItemCategory {
  FOOD
  DOCUMENTS
  GADGET
  OTHERS
}

enum ItemType {
  PERISHABLE
  NON_PERISHABLE
}

enum UserType {
  USER
  RIDER
  SUPERADMIN
}

enum vehicleType {
  CAR
  VAN
  TRUCK
  BIKE
}

enum BusinessType {
  REGISTERED
  NON_REGISTERED
}

enum OrganisationType {
  PRIVATE
  PUBLIC
}

enum UserStatus {
  ACTIVE
  PENDING
  DISMISSED
}

enum StoreStatus {
  ACTIVE
  INACTIVE
}

enum CampaignType {
  EMAIL
  PUSH
  SMS
}

enum NotificationType {
  ORDER
  GENERAL
  PRODUCT
  STORE
  TOPUP
}

enum BroadcastMode {
  PUSH
  EMAIL
  SMS
}

enum BroadcastRecipient {
  ALL
  SHOPPERS
  MALLS
}

enum BroadcastStatus {
  PUBLISHED
  DRAFTED
}

enum TransactionStatus {
  SUCCESSFUL
  PENDING
  FAILED
}

enum TransactionPaymentMethod {
  WALLET
  TRANSFER
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TwoFactorAuthenticationMethod {
  EMAIL_OTP
  SMS_OTP
  THIRD_PARTY_AUTHENTICATOR
}

enum AdvertStatus {
  PUBLISHED
  DRAFTED
}

model Rating {
  id        Int      @id @default(autoincrement())
  stars     Int
  comment   String?
  createdAt DateTime @default(now())
  productId String
  userId    String
}

model Trip {
  id            String                   @id @default(cuid())
  timeline      TripTimeLine             @default(ORDER_RECEIVED)
  userId        String
  user          User                     @relation(fields: [userId], references: [id])
  Status        TripStatus               @default(PENDING)
  type          TripType                 @default(DISPATCH)
  price         Int
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @default(now())
  startedAt     DateTime                 @default(now())
  endedAt       DateTime                 @default(now())
  scheduled     Boolean                  @default(false)
  scheduledAt   DateTime                 @default(now())
  paymentMethod TransactionPaymentMethod @default(WALLET)
  pickup        String
  destination   String
  senderPhone   String?
  receiverPhone String?
  Item          Item[]
}

model Item {
  id        String       @id @default(cuid())
  name      String
  quantity  Int          @default(0)
  tripId    String
  trip      Trip         @relation(fields: [tripId], references: [id])
  createdAt DateTime     @default(now())
  images    String[]
  category  ItemCategory @default(OTHERS)
  type      ItemType     @default(NON_PERISHABLE)
}

model Vehicle {
  id          String      @id @default(cuid())
  brand       String
  model       String
  colour      String
  year        String
  document    String
  insurance   String
  ownership   String
  capacity    String
  images      String[]
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  plateNumber String
  type        vehicleType @default(BIKE)
  createdAt   DateTime    @default(now())
}

model kyc {
  id        String   @id @default(cuid())
  idType    String
  idFront   String
  idBack    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  idNumber  String
  createdAt DateTime @default(now())
}

model User {
  id                            String                        @id @default(cuid())
  firstName                     String                        @db.VarChar(255)
  lastName                      String                        @db.VarChar(255)
  email                         String                        @unique @db.VarChar(255)
  userStatus                    UserStatus                    @default(PENDING)
  organisationId                String?
  organisationPortflio          Portfolio?                    @default(DIRECTOR)
  organisation                  Organisation?                 @relation(fields: [organisationId], references: [id])
  type                          UserType                      @default(USER)
  photoUrl                      String?                       @db.VarChar(500)
  phoneNumber                   String?
  password                      String?                       @db.VarChar(500)
  emailVerified                 Boolean?                      @default(false)
  accountVerified               Boolean?                      @default(false)
  otpCode                       String?
  otpCodeUsed                   Boolean                       @default(false)
  otpCodeExpiryTime             String?
  roleId                        String?
  role                          Role?                         @relation(fields: [roleId], references: [id])
  pushToken                     String?
  userBanks                     UserBank[]
  notifications                 Notification[]
  transactions                  Transaction[]
  wallet                        Wallet?
  notificationSetting           NotificationSetting?
  twoFactorEnabled              Boolean                       @default(false)
  twoFactorAuthenticationMethod TwoFactorAuthenticationMethod @default(EMAIL_OTP)
  twoFactorAuthenticationSecret String?
  isDeactivated                 Boolean                       @default(false)
  deactivationReason            String?
  createdAt                     DateTime                      @default(now())
  Trip                          Trip[]
  Vehicle                       Vehicle[]
  Card                          Card?
  kyc                           kyc[]
}

model Organisation {
  id           String         @id @default(cuid())
  name         String         @unique @db.VarChar(255)
  type         BusinessType   @default(NON_REGISTERED)
  slug         String         @unique @db.VarChar(255)
  logo         String?        @db.VarChar(600)
  file         String?        @db.VarChar(600)
  regNo        String         @unique @db.VarChar(100)
  createdAt    DateTime       @default(now())
  users        User[]
  wallet       Wallet?
  transactions Transaction[]
  Notification Notification[]
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String           @db.VarChar(255)
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id      String           @id @default(cuid())
  action  String
  subject String
  roles   RolePermission[]

  @@unique([action, subject])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Bank {
  id        String     @id @default(cuid())
  name      String
  slug      String
  code      String
  country   String
  userBanks UserBank[]
  createdAt DateTime   @default(now())
}

model UserBank {
  id            String   @id @default(cuid())
  accountNumber String
  accountName   String
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  bankId        String
  bank          Bank     @relation(fields: [bankId], references: [id])
  createdAt     DateTime @default(now())
}

model NotificationSetting {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  emailNotification Boolean
  pushNotification  Boolean
  smsNotification   Boolean
  createdAt         DateTime @default(now())
}

model Notification {
  id             String           @id @default(cuid())
  userId         String?
  user           User?            @relation(fields: [userId], references: [id])
  organisationId String?
  organisation   Organisation?    @relation(fields: [organisationId], references: [id])
  type           NotificationType @default(GENERAL)
  title          String?
  content        String
  createdAt      DateTime         @default(now())
}

model Transaction {
  id             String                   @id @default(cuid())
  tripId         String?
  userId         String?
  user           User?                    @relation(fields: [userId], references: [id])
  organisationId String?
  organisation   Organisation?            @relation(fields: [organisationId], references: [id])
  reference      String?
  amount         Decimal
  status         TransactionStatus
  paymentMethod  TransactionPaymentMethod
  type           TransactionType
  description    String
  createdAt      DateTime                 @default(now())
}

model Campaign {
  id        String       @id @default(cuid())
  type      CampaignType @default(EMAIL)
  title     String
  content   String
  createdAt DateTime     @default(now())
  readAt    DateTime?
}

model CampaignDraft {
  id        String       @id @default(cuid())
  type      CampaignType @default(EMAIL)
  title     String?
  content   String?
  createdAt DateTime     @default(now())
  readAt    DateTime?
}

model Wallet {
  id             String        @id @default(cuid())
  userId         String?       @unique
  user           User?         @relation(fields: [userId], references: [id])
  organisationId String?       @unique
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  balance        Decimal       @default(0.00)
  currency       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
}

model Card {
  id                String   @id @default(cuid())
  userId            String   @unique
  cardHolderName    String
  cardNumber        String
  expiryDate        String
  cvv               Int
  brand             String
  cardType          String
  authorizationCode String
  isPreferred       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

model Advert {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  imgUrl    String
  title     String
  status    Status   @default(ACTIVE)
}

model AdvertDraft {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  imgUrl    String?
  title     String?
  status    Status?  @default(ACTIVE)
}

model Broadcast {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  title       String
  body        String
  mode        BroadcastMode
  recipient   BroadcastRecipient
  status      BroadcastStatus
  type        String
  scheduledAt DateTime?
  isSent      Boolean            @default(false)
}

model AdminRevenue {
  id             String   @id @default(cuid())
  organisationId String
  amount         Decimal  @default(0.00)
  currency       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}
