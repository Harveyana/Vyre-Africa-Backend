// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  PENDING
  ACTIVE
  NOT_ACTIVE
}

enum Portfolio {
  FOUNDER
  SHAREHOLDER
  DIRECTOR
}

enum ProductStatus {
  PUBLISHED
  DRAFTED
}

enum AccountType {
  BUSINESS
  INDIVIDUAL
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  CREATED
  PENDING
  REJECTED
  UNDER_REVIEW
  DEACTIVATED
  DISMISSED
}

enum SwapStatus {
  AWAITING_TRANSFER
  CREATED
  PROCESSING
  COMPLETED
  FAILED
}

enum OrderType {
  BUY
  SELL
}

enum OrderStatus {
  OPEN
  CLOSED
  CANCELED
}

enum CampaignType {
  EMAIL
  PUSH
  SMS
}

enum NotificationType {
  ORDER
  GENERAL
  PRODUCT
  STORE
  TOPUP
}

enum BroadcastMode {
  PUSH
  EMAIL
  SMS
}

enum BroadcastRecipient {
  ALL
  SHOPPERS
  MALLS
}

enum BroadcastStatus {
  PUBLISHED
  DRAFTED
}

enum walletType {
  CRYPTO
  FIAT
}

enum currencyType {
  CRYPTO
  FIAT
}

enum TransactionStatus {
  SUCCESSFUL
  PENDING
  FAILED
}

enum TransactionPaymentMethod {
  WALLET
  TRANSFER
}

enum ActivityType {
  REFERRAL
  NOTIFICATION
}

enum ActivityStatus {
  CLOSED
  OPEN
}

enum TransactionType {
  FAILED
  CREDIT_PAYMENT
  DEBIT_PAYMENT
  FIAT_DEPOSIT
  FIAT_WITHDRAWAL
  EXCHANGE_BUY
  EXCHANGE_SELL
}

enum AwaitingStatus {
  PENDING
  PROCESSING
  SUCCESS
  REFUNDED
  FAILED
}

enum TwoFactorAuthenticationMethod {
  EMAIL_OTP
  SMS_OTP
  THIRD_PARTY_AUTHENTICATOR
}

enum AdvertStatus {
  PUBLISHED
  DRAFTED
}

enum EmploymentStatus {
  EMPLOYED
  SELF_EMPLOYED
  UNEMPLOYED
  STUDENT
  RETIRED
}

enum SourceOfFunds {
  SALARY
  INVESTMENTS
  SAVINGS
  FAMILY
  OTHER
}

enum AccountPurpose {
  PERSONAL_USE
  BUSINESS
  INVESTMENT
  OTHER
}

enum GovernmentIdType {
  PASSPORT
  DRIVERS_LICENSE
  NATIONAL_ID
  RESIDENCE_PERMIT
}

enum ProofOfAddressType {
  UTILITY_BILL
  BANK_STATEMENT
  GOVERNMENT_LETTER
  LEASE_AGREEMENT
}

model Rating {
  id        Int      @id @default(autoincrement())
  stars     Int
  comment   String?
  createdAt DateTime @default(now())
  productId String
  userId    String
}

model User {
  id           String      @id @default(cuid())
  authId       String?     @unique
  firstName    String      @db.VarChar(255)
  lastName     String      @db.VarChar(255)
  BusinessName String?
  referralId   String?
  referreeId   String?
  email        String      @unique @db.VarChar(255)
  userStatus   UserStatus  @default(ACTIVE)
  type         AccountType @default(INDIVIDUAL)
  photoUrl     String?     @db.VarChar(500)
  phoneNumber  String?

  country    String?
  address    String?
  city       String?
  state      String?
  postalCode String?

  password          String?  @db.VarChar(500)
  emailVerified     Boolean? @default(false)
  accountVerified   Boolean? @default(false)
  otpCode           String?
  otpCodeUsed       Boolean  @default(false)
  otpCodeExpiryTime String?

  fernUserId                    String?
  fernKycLink                   String?
  userBanks                     UserBank[]
  notifications                 Notification[]
  transactions                  Transaction[]
  wallet                        Wallet[]
  notificationSetting           NotificationSetting?
  twoFactorEnabled              Boolean                       @default(false)
  twoFactorAuthenticationMethod TwoFactorAuthenticationMethod @default(EMAIL_OTP)
  twoFactorAuthenticationSecret String?
  isDeactivated                 Boolean                       @default(false)
  deactivationReason            String?
  createdAt                     DateTime                      @default(now())
  Order                         Order[]
  PendingActivity               PendingActivity[]
  Card                          Card?
  fiatAccount                   fiatAccount[]
  cryptoAccount                 cryptoAccount[]
  Swap                          Swap[]
  userKyc                       UserKyc[]                     @relation("UserKycToUser")

  Awaiting    Awaiting[]
  postDetails postDetails[]
}

model UserKyc {
  id                      String   @id @default(uuid())
  firstName               String
  lastName                String
  phoneNumber             String
  dateOfBirth             DateTime
  employmentStatus        String
  mostRecentOccupation    String?
  sourceOfFunds           String
  accountPurpose          String
  expectedMonthlyPayments String
  isIntermediary          Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Address relation (one-to-one)
  addressId String  @unique
  address   Address @relation(fields: [addressId], references: [id], name: "UserKycToAddress")

  // Documents relation (one-to-one)
  documentsId String    @unique
  documents   Documents @relation(fields: [documentsId], references: [id], name: "UserKycToDocuments")

  // User relation (many-to-one)
  userId String
  user   User   @relation(fields: [userId], references: [id], name: "UserKycToUser")

  @@index([userId])
}

model Address {
  id                  String   @id @default(uuid())
  streetLine1         String
  city                String
  stateRegionProvince String
  postalCode          String
  countryCode         String   @db.Char(3)
  userKyc             UserKyc? @relation("UserKycToAddress")
}

model Documents {
  id String @id @default(uuid())

  // Identity relation (one-to-one)
  identityId String   @unique
  identity   Identity @relation(fields: [identityId], references: [id], name: "DocumentsToIdentity")

  // Proof of Address relation (one-to-one)
  proofOfAddressId String         @unique
  proofOfAddress   ProofOfAddress @relation(fields: [proofOfAddressId], references: [id], name: "DocumentsToProofOfAddress")

  // UserKyc relation (one-to-one)
  userKyc UserKyc? @relation("UserKycToDocuments")
}

model Identity {
  id               String     @id @default(uuid())
  type             String
  countryCode      String     @db.Char(3)
  documentIdNumber String
  issuanceDate     DateTime
  expirationDate   DateTime
  frontIdImage     String?
  documents        Documents? @relation("DocumentsToIdentity")
}

model ProofOfAddress {
  id                  String     @id @default(uuid())
  type                String
  description         String?
  proofOfAddressImage String
  documents           Documents? @relation("DocumentsToProofOfAddress")
}

model Swap {
  id        String     @id @default(cuid())
  status    SwapStatus @default(CREATED)
  userId    String?
  user      User?      @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())

  sourceCurrency      String
  destinationCurrency String

  rate              Float?
  sourceAmount      Float?
  destinationAmount Float?
  fee               Float?
}

model Bank {
  id       String  @id @default(cuid())
  name     String
  slug     String
  code     String
  country  String
  currency String?

  address    String?
  postalCode String?
  state      String?
  city       String?

  userBanks UserBank[]
  createdAt DateTime   @default(now())
}

model UserBank {
  id            String   @id @default(cuid())
  accountNumber String
  accountName   String
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  bankId        String
  bank          Bank     @relation(fields: [bankId], references: [id])
  createdAt     DateTime @default(now())
}

model fiatAccount {
  id            String @id @default(cuid())
  name          String
  bank          String
  accountNumber String
  currency      String
  method        String
  country       String

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model cryptoAccount {
  id               String   @id @default(cuid())
  name             String
  cryptoWalletType String
  chain            String
  address          String
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
}

model NotificationSetting {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  emailNotification Boolean
  pushNotification  Boolean
  smsNotification   Boolean
  createdAt         DateTime @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  userId    String?
  user      User?            @relation(fields: [userId], references: [id])
  type      NotificationType @default(GENERAL)
  title     String?
  content   String
  createdAt DateTime         @default(now())
}

model Transaction {
  id          String            @id @default(cuid())
  walletId    String?
  userId      String?
  orderId     String?
  currency    String?
  user        User?             @relation(fields: [userId], references: [id])
  wallet      Wallet?           @relation(fields: [walletId], references: [id])
  reference   String?
  amount      Decimal
  status      TransactionStatus
  type        TransactionType
  description String
  createdAt   DateTime          @default(now())
}

model Currency {
  id   String       @id @default(cuid())
  type currencyType @default(CRYPTO)

  name        String
  ISO         String
  chain       String?
  imgUrl      String?
  chainImgUrl String?
  flagEmoji   String?

  tatumChain String?

  isStablecoin Boolean       @default(false)
  createdAt    DateTime      @default(now())
  Wallet       Wallet[]
  basePairs    Pair[]        @relation("baseCurrency")
  quotePairs   Pair[]        @relation("quoteCurrency")
  Awaiting     Awaiting[]
  postDetails  postDetails[]
}

model Wallet {
  id String @id @default(cuid())

  userId     String?
  user       User?     @relation(fields: [userId], references: [id])
  currencyId String?
  currency   Currency? @relation(fields: [currencyId], references: [id])

  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  Tatum_customerId   String
  accountingCurrency String
  depositAddress     String?
  destinationTag     String?
  derivationKey      Int?
  frozen             Boolean

  accountBalance   Decimal @default(0.00)
  availableBalance Decimal @default(0.00)

  Transaction Transaction[]
  Block       Block[]
  basePairs   Pair[]        @relation("BaseWallet") // Reverse relation for `baseWallet`
  quotePairs  Pair[]        @relation("QuoteWallet") // Reverse relation for `quoteWallet`
  Awaiting    Awaiting[]
  postDetails postDetails[]
}

model Order {
  id                  String      @id @default(cuid())
  type                OrderType   @default(BUY)
  blockId             String?
  userId              String?
  pairId              String
  amountMinimum       Float       @default(0.00) // minimum amount required for to place a sell order
  user                User?       @relation(fields: [userId], references: [id])
  pair                Pair        @relation(fields: [pairId], references: [id])
  block               Block?      @relation(fields: [blockId], references: [id])
  amount              Float
  amountProcessed     Float       @default(0.0) // Amount of the order that has been filled
  percentageProcessed Float       @default(0.0) // Percentage of the order that has been filled
  price               Float
  status              OrderStatus @default(OPEN)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  Awaiting            Awaiting[]
}

model Pair {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  // Currency Relations
  baseId       String?
  baseCurrency Currency? @relation("baseCurrency", fields: [baseId], references: [id])

  quoteId       String?
  quoteCurrency Currency? @relation("quoteCurrency", fields: [quoteId], references: [id])

  // Wallet Relations
  baseWalletId String?
  baseWallet   Wallet? @relation("BaseWallet", fields: [baseWalletId], references: [id])

  quoteWalletId String?
  quoteWallet   Wallet? @relation("QuoteWallet", fields: [quoteWalletId], references: [id])
  Order         Order[]

  @@index([baseId])
  @@index([quoteId])
  @@index([baseWalletId])
  @@index([quoteWalletId])
  @@index([createdAt])
}

model Block {
  id          String   @id @default(cuid())
  active      Boolean  @default(true)
  walletId    String?
  wallet      Wallet?  @relation(fields: [walletId], references: [id])
  amount      Float
  description String
  createdAt   DateTime @default(now())
  Order       Order[]
}

model PendingActivity {
  id          String         @id @default(cuid())
  type        ActivityType   @default(REFERRAL)
  userId      String?
  user        User?          @relation(fields: [userId], references: [id])
  amount      Float?
  orderAmount Float?
  status      ActivityStatus @default(OPEN)
  createdAt   DateTime       @default(now())
  executedAt  DateTime
}

model Awaiting {
  id             String         @id @default(cuid())
  triggerAddress String?
  reference      String?
  walletId       String?
  userId         String?
  orderId        String?
  amount         Decimal
  orderType      OrderType
  status         AwaitingStatus @default(PENDING)
  currencyId     String?

  bank_Name           String?
  bank_Account_Number String?
  bank_Account_Name   String?
  bank_expires_At     DateTime?

  currency Currency? @relation(fields: [currencyId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  wallet   Wallet?   @relation(fields: [walletId], references: [id])
  order    Order?    @relation(fields: [orderId], references: [id])

  createdAt   DateTime      @default(now())
  postDetails postDetails[]
}

model postDetails {
  id         String  @id @default(cuid())
  awaitingId String?
  walletId   String?
  userId     String?
  orderId    String?
  amount     Decimal
  currencyId String?

  bankCode       String?
  accountNumber  String?
  recipient_Name String?

  chain   String?
  address String?

  awaiting Awaiting? @relation(fields: [awaitingId], references: [id])
  currency Currency? @relation(fields: [currencyId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  wallet   Wallet?   @relation(fields: [walletId], references: [id])

  createdAt DateTime @default(now())
}

model Card {
  id                String   @id @default(cuid())
  userId            String   @unique
  cardHolderName    String
  cardNumber        String
  expiryDate        String
  cvv               Int
  brand             String
  cardType          String
  authorizationCode String
  isPreferred       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

model Advert {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  imgUrl    String
  title     String
  status    Status   @default(ACTIVE)
}

model AdvertDraft {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  imgUrl    String?
  title     String?
  status    Status?  @default(ACTIVE)
}

model Broadcast {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  title       String
  body        String
  mode        BroadcastMode
  recipient   BroadcastRecipient
  status      BroadcastStatus
  type        String
  scheduledAt DateTime?
  isSent      Boolean            @default(false)
}

model AdminRevenue {
  id             String   @id @default(cuid())
  organisationId String
  amount         Decimal  @default(0.00)
  currency       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}
